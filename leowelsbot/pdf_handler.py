import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaDocument
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from config import BotConfig, Messages

logger = logging.getLogger(__name__)

async def send_protected_pdf(query, context) -> None:
    """Send PDF with protection against forwarding"""
    
    try:
        # Show uploading action
        await context.bot.send_chat_action(
            chat_id=query.message.chat_id, 
            action=ChatAction.UPLOAD_DOCUMENT
        )
        
        # Check if PDF exists
        if not os.path.exists(BotConfig.PDF_PATH):
            await query.edit_message_text(
                Messages.PDF_UNAVAILABLE,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{BotConfig.LEO_USERNAME.replace("@", "")}')],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
                ])
            )
            return
        
        # Send PDF with protection
        with open(BotConfig.PDF_PATH, 'rb') as pdf_file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=pdf_file,
                filename="LEO_SYSTEM_Guide.pdf",
                caption="üéØ LEO SYSTEM: –ø—É—Ç—å –æ—Ç 0 –¥–æ 300–∫+\n\nüí° –ò–∑—É—á–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–π. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–±—è.",
                protect_content=BotConfig.PROTECT_CONTENT,  # Prevent forwarding
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_main')],
                    [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{BotConfig.LEO_USERNAME.replace("@", "")}')]
                ])
            )
            
        # Update original message
        await query.edit_message_text(
            Messages.PDF_SUCCESS,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_main')],
                [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{BotConfig.LEO_USERNAME.replace("@", "")}')]
            ])
        )
        
        # Log successful delivery
        user_info = query.from_user
        logger.info(f"PDF delivered to user: {user_info.id} (@{user_info.username})")
        
    except Exception as e:
        logger.error(f"Error sending PDF: {e}")
        await query.edit_message_text(
            Messages.PDF_ERROR,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{BotConfig.LEO_USERNAME.replace("@", "")}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ])
        )

def create_sample_pdf():
    """Create a sample PDF if it doesn't exist"""
    os.makedirs(BotConfig.ASSETS_DIR, exist_ok=True)
    
    if not os.path.exists(BotConfig.PDF_PATH):
        # Create a simple text file as placeholder
        sample_content = """LEO SYSTEM: –ø—É—Ç—å –æ—Ç 0 –¥–æ 300–∫+

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.
–ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π PDF-–≥–∞–π–¥.

–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:
- –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ Telegram
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –≥–∞–π–¥–∞:
@leowels
"""
        
        with open(BotConfig.PDF_PATH.replace('.pdf', '_demo.txt'), 'w', encoding='utf-8') as f:
            f.write(sample_content)