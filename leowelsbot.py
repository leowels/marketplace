import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_USERNAME = "leowels"
PDF_FILE_PATH = "leo_system_guide.pdf"

class LeoWelsBot:
    def __init__(self):
        self.application = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
        start_text = """–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ Leo.

–Ø –Ω–µ –º–æ—Ç–∏–≤–∏—Ä—É—é. –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –ø—É—Ç—å.
–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∏—à—å PDF-–≥–∞–π–¥, –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –º–æ–∂–µ—à—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ 300–∫+ —á–µ—Ä–µ–∑ Telegram.

üëá –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:"""
        
        keyboard = [
            [InlineKeyboardButton("üìò –ü–æ–ª—É—á–∏—Ç—å PDF-–≥–∞–π–¥", callback_data='get_pdf')],
            [InlineKeyboardButton("üß© –ß—Ç–æ —Ç–∞–∫–æ–µ Leo System?", callback_data='about_system')],
            [InlineKeyboardButton("ü§ñ –•–æ—á—É —Å–≤–æ–π –±–æ—Ç", callback_data='want_bot')],
            [InlineKeyboardButton("ü¶Å –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data='mentorship')],
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{ADMIN_USERNAME}')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(start_text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(start_text, reply_markup=reply_markup)
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'get_pdf':
            await self.send_pdf(query)
        elif query.data == 'about_system':
            await self.about_system(query)
        elif query.data == 'want_bot':
            await self.want_bot(query)
        elif query.data == 'mentorship':
            await self.mentorship(query)
        elif query.data == 'back_to_menu':
            await self.start(update, context)
    
    async def send_pdf(self, query) -> None:
        """–ë–ª–æ–∫ –≤—ã–¥–∞—á–∏ PDF-–≥–∞–π–¥–∞"""
        pdf_text = """LEO SYSTEM: –ø—É—Ç—å –æ—Ç 0 –¥–æ 300–∫+

–ó–∞–±–µ—Ä–∏ –≥–∞–π–¥. –ù–æ –ø–æ–º–Ω–∏: –ø—Ä–æ—á–∏—Ç–∞—Ç—å ‚Äî –º–∞–ª–æ.  
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è = –¥–µ–Ω—å–≥–∏.

üëá –ù–∏–∂–µ –∫–Ω–æ–ø–∫–∞:"""
        
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data='download_pdf')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(pdf_text, reply_markup=reply_markup)
    
    async def download_pdf(self, query) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(PDF_FILE_PATH):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                with open(PDF_FILE_PATH, 'rb') as pdf_file:
                    await query.message.reply_document(
                        document=pdf_file,
                        filename="Leo_System_Guide.pdf",
                        caption="üî• LEO SYSTEM GUIDE\n\n–¢–µ–ø–µ—Ä—å ‚Äî —Ä–µ–∞–ª–∏–∑—É–π!",
                        protect_content=True  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                    )
            else:
                await query.message.reply_text(
                    "üìÅ PDF –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ @leowels –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
            await query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ @leowels –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞."
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    async def about_system(self, query) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Leo System"""
        system_text = """Leo System ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—Å—Ç—Ä–æ–∏—Ç—å:
- –õ–∏—á–Ω–æ—Å—Ç—å —Å –≤–ª–∏—è–Ω–∏–µ–º
- –î–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
- –í–æ—Ä–æ–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ —Ç–µ–±—è

üì¶ –í–Ω—É—Ç—Ä–∏:
‚Äì PDF-–≥–∞–π–¥—ã
‚Äì –ë–æ—Ç—ã
‚Äì –°–∫—Ä–∏–ø—Ç—ã
‚Äì –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ
‚Äì –§—Ä–∞–Ω—à–∏–∑–∞

üëë –¢—ã –Ω–µ –∫–ª–∏–µ–Ω—Ç. –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π."""
        
        keyboard = [
            [InlineKeyboardButton("üìò –ü–æ–ª—É—á–∏—Ç—å PDF-–≥–∞–π–¥", callback_data='get_pdf')],
            [InlineKeyboardButton("ü§ñ –•–æ—á—É —Å–≤–æ–π –±–æ—Ç", callback_data='want_bot')],
            [InlineKeyboardButton("ü¶Å –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data='mentorship')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(system_text, reply_markup=reply_markup)
    
    async def want_bot(self, query) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤"""
        bot_text = """–Ø —Å–æ–±–∏—Ä–∞—é Telegram-–±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ:
‚Äì –ü—Ä–æ–¥–∞—é—Ç
‚Äì –û—Ç–±–∏—Ä–∞—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Äì –†–∞–±–æ—Ç–∞—é—Ç 24/7

üí∞ –¶–µ–Ω–∞ –æ—Ç 5 000 ‚ÇΩ
–í—Å—ë –ø–æ–¥ –∫–ª—é—á. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ.

‚úçÔ∏è –•–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏: @leowels"""
        
        keyboard = [
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{ADMIN_USERNAME}')],
            [InlineKeyboardButton("üß© –ß—Ç–æ —Ç–∞–∫–æ–µ Leo System?", callback_data='about_system')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(bot_text, reply_markup=reply_markup)
    
    async def mentorship(self, query) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ"""
        mentorship_text = """–Ø –±–µ—Ä—É –∑–∞ —Ä—É–∫—É –∏ –≤–µ–¥—É —Ç–µ–±—è –∫ –ø–µ—Ä–≤—ã–º 100‚Äì300–∫.

‚Äì –ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
‚Äì –ë–µ–∑ —Ä–µ–∫–ª–∞–º
‚Äì –¢–æ–ª—å–∫–æ Telegram –∏ —Å–∏—Å—Ç–µ–º–∞

üí• –°—Ç–∞—Ä—Ç ‚Äî –ø–æ –∑–∞—è–≤–∫–µ. –ö–æ–ª-–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.

‚úçÔ∏è –ù–∞–ø–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å: @leowels"""
        
        keyboard = [
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{ADMIN_USERNAME}')],
            [InlineKeyboardButton("üìò –ü–æ–ª—É—á–∏—Ç—å PDF-–≥–∞–π–¥", callback_data='get_pdf')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(mentorship_text, reply_markup=reply_markup)
    
    async def handle_download_pdf(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ PDF"""
        query = update.callback_query
        if query and query.data == 'download_pdf':
            await query.answer()
            await self.download_pdf(query)
    
    def run(self, token: str):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback, pattern='^(get_pdf|about_system|want_bot|mentorship|back_to_menu)$'))
        self.application.add_handler(CallbackQueryHandler(self.handle_download_pdf, pattern='^download_pdf$'))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ LeoWels Bot –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN='your_bot_token'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = LeoWelsBot()
    bot.run(token)

if __name__ == '__main__':
    main()