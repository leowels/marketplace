import logging
import os
import asyncio
from datetime import datetime
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import TelegramError

from config import load_config, BotConfig

class LeoWelsBotEnhanced:
    def __init__(self, config: BotConfig):
        self.config = config
        self.application = None
        self.user_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format=config.log_format,
            level=getattr(logging, config.log_level)
        )
        self.logger = logging.getLogger(__name__)
    
    def track_user_action(self, user_id: int, action: str) -> None:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if user_id not in self.user_stats:
            self.user_stats[user_id] = {
                'first_visit': datetime.now(),
                'actions': []
            }
        
        self.user_stats[user_id]['actions'].append({
            'action': action,
            'timestamp': datetime.now()
        })
        
        self.logger.info(f"User {user_id} performed action: {action}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
        user_id = update.effective_user.id
        self.track_user_action(user_id, 'start')
        
        keyboard = [
            [InlineKeyboardButton("üìò –ü–æ–ª—É—á–∏—Ç—å PDF-–≥–∞–π–¥", callback_data='get_pdf')],
            [InlineKeyboardButton("üß© –ß—Ç–æ —Ç–∞–∫–æ–µ Leo System?", callback_data='about_system')],
            [InlineKeyboardButton("ü§ñ –•–æ—á—É —Å–≤–æ–π –±–æ—Ç", callback_data='want_bot')],
            [InlineKeyboardButton("ü¶Å –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data='mentorship')],
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{self.config.admin_username}')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            if update.message:
                await update.message.reply_text(
                    self.config.start_message, 
                    reply_markup=reply_markup
                )
            else:
                await update.callback_query.edit_message_text(
                    self.config.start_message, 
                    reply_markup=reply_markup
                )
        except TelegramError as e:
            self.logger.error(f"Error in start method: {e}")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()
        
        action_map = {
            'get_pdf': self.send_pdf,
            'about_system': self.about_system,
            'want_bot': self.want_bot,
            'mentorship': self.mentorship,
            'back_to_menu': lambda q: self.start(update, context),
            'download_pdf': self.download_pdf
        }
        
        if query.data in action_map:
            self.track_user_action(user_id, query.data)
            try:
                if query.data == 'back_to_menu':
                    await action_map[query.data](query)
                else:
                    await action_map[query.data](query)
            except TelegramError as e:
                self.logger.error(f"Error handling callback {query.data}: {e}")
    
    async def send_pdf(self, query) -> None:
        """–ë–ª–æ–∫ –≤—ã–¥–∞—á–∏ PDF-–≥–∞–π–¥–∞"""
        keyboard = [
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data='download_pdf')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(self.config.pdf_message, reply_markup=reply_markup)
    
    async def download_pdf(self, query) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(self.config.pdf_file_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                with open(self.config.pdf_file_path, 'rb') as pdf_file:
                    await query.message.reply_document(
                        document=pdf_file,
                        filename="Leo_System_Guide.pdf",
                        caption="üî• LEO SYSTEM GUIDE\n\n–¢–µ–ø–µ—Ä—å ‚Äî —Ä–µ–∞–ª–∏–∑—É–π!",
                        protect_content=self.config.protect_pdf
                    )
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
                await self.notify_admin_pdf_download(user_id, query.from_user)
                    
            else:
                await query.message.reply_text(
                    f"üìÅ PDF –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ @{self.config.admin_username} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞."
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
            await query.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ @{self.config.admin_username} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞."
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    async def notify_admin_pdf_download(self, user_id: int, user) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF"""
        try:
            admin_message = f"""üìä –ù–û–í–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï PDF
            
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''}
üÜî ID: {user_id}
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üì± Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"""
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
            self.logger.info(f"PDF downloaded by user {user_id}")
            
        except Exception as e:
            self.logger.error(f"Error notifying admin: {e}")
    
    async def about_system(self, query) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Leo System"""
        keyboard = [
            [InlineKeyboardButton("üìò –ü–æ–ª—É—á–∏—Ç—å PDF-–≥–∞–π–¥", callback_data='get_pdf')],
            [InlineKeyboardButton("ü§ñ –•–æ—á—É —Å–≤–æ–π –±–æ—Ç", callback_data='want_bot')],
            [InlineKeyboardButton("ü¶Å –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data='mentorship')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(self.config.system_message, reply_markup=reply_markup)
    
    async def want_bot(self, query) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{self.config.admin_username}')],
            [InlineKeyboardButton("üß© –ß—Ç–æ —Ç–∞–∫–æ–µ Leo System?", callback_data='about_system')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(self.config.bot_service_message, reply_markup=reply_markup)
    
    async def mentorship(self, query) -> None:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–µ"""
        keyboard = [
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å Leo", url=f'https://t.me/{self.config.admin_username}')],
            [InlineKeyboardButton("üìò –ü–æ–ª—É—á–∏—Ç—å PDF-–≥–∞–π–¥", callback_data='get_pdf')],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(self.config.mentorship_message, reply_markup=reply_markup)
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if username != self.config.admin_username:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        
        total_users = len(self.user_stats)
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
        action_counts = {}
        for user_data in self.user_stats.values():
            for action_data in user_data['actions']:
                action = action_data['action']
                action_counts[action] = action_counts.get(action, 0) + 1
        
        stats_message = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê @leowelsbot

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}

üìà –î–µ–π—Å—Ç–≤–∏—è:
"""
        
        for action, count in action_counts.items():
            stats_message += f"‚Ä¢ {action}: {count}\n"
        
        await update.message.reply_text(stats_message)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(self.config.bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print(f"ü§ñ LeoWels Bot Enhanced –∑–∞–ø—É—â–µ–Ω!")
        print(f"üë§ –ê–¥–º–∏–Ω: @{self.config.admin_username}")
        print(f"üìÅ PDF —Ñ–∞–π–ª: {self.config.pdf_file_path}")
        
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        config = load_config()
        bot = LeoWelsBotEnhanced(config)
        bot.run()
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN='your_bot_token'")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()